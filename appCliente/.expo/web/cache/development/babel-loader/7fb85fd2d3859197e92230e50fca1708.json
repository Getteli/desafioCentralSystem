{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport axios from \"axios\";\nimport UrlService from \"./UrlService\";\nimport CookieService from \"./CookieService\";\nvar expiresAt = 60 * 24;\n\nvar AuthService = function () {\n  function AuthService() {\n    _classCallCheck(this, AuthService);\n  }\n\n  _createClass(AuthService, [{\n    key: \"doUserLogin\",\n    value: function doUserLogin(credentials) {\n      var response;\n      return _regeneratorRuntime.async(function doUserLogin$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(axios.post(UrlService.loginUrl(), credentials));\n\n            case 3:\n              response = _context.sent;\n              return _context.abrupt(\"return\", response.data);\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(\"Error\", _context.t0.response);\n              return _context.abrupt(\"return\", false);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 7]], Promise);\n    }\n  }, {\n    key: \"handleLoginSuccess\",\n    value: function handleLoginSuccess(response, remember) {\n      if (!remember) {\n        var _options = {\n          path: \"/\"\n        };\n        CookieService.set(\"access_token\", response.access_token, _options);\n        return true;\n      }\n\n      var date = new Date();\n      date.setTime(date.getTime() + expiresAt * 60 * 1000);\n      var options = {\n        path: \"/\",\n        expires: date\n      };\n      CookieService.set(\"access_token\", response.access_token, options);\n      return true;\n    }\n  }]);\n\n  return AuthService;\n}();\n\nexport default new AuthService();","map":{"version":3,"sources":["/var/www/html/Desafio/appCliente/services/AuthService.js"],"names":["axios","UrlService","CookieService","expiresAt","AuthService","credentials","post","loginUrl","response","data","console","error","remember","options","path","set","access_token","date","Date","setTime","getTime","expires"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP;AACA,OAAOC,aAAP;AAEA,IAAMC,SAAS,GAAG,KAAK,EAAvB;;IAUMC,W;;;;;;;WACJ,qBAAkBC,WAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAE2BL,KAAK,CAACM,IAAN,CAAWL,UAAU,CAACM,QAAX,EAAX,EAAkCF,WAAlC,CAF3B;;AAAA;AAEUG,cAAAA,QAFV;AAAA,+CAGWA,QAAQ,CAACC,IAHpB;;AAAA;AAAA;AAAA;AAKIC,cAAAA,OAAO,CAACC,KAAR,CAAc,OAAd,EAAuB,YAAMH,QAA7B;AALJ,+CAMW,KANX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;WASA,4BAAmBA,QAAnB,EAAkCI,QAAlC,EAAqD;AACnD,UAAI,CAACA,QAAL,EAAe;AACb,YAAMC,QAAO,GAAG;AAAEC,UAAAA,IAAI,EAAE;AAAR,SAAhB;AACAZ,QAAAA,aAAa,CAACa,GAAd,CAAkB,cAAlB,EAAkCP,QAAQ,CAACQ,YAA3C,EAAyDH,QAAzD;AACA,eAAO,IAAP;AACD;;AAED,UAAII,IAAI,GAAG,IAAIC,IAAJ,EAAX;AACAD,MAAAA,IAAI,CAACE,OAAL,CAAaF,IAAI,CAACG,OAAL,KAAiBjB,SAAS,GAAG,EAAZ,GAAiB,IAA/C;AACA,UAAMU,OAAO,GAAG;AAAEC,QAAAA,IAAI,EAAE,GAAR;AAAaO,QAAAA,OAAO,EAAEJ;AAAtB,OAAhB;AACAf,MAAAA,aAAa,CAACa,GAAd,CAAkB,cAAlB,EAAkCP,QAAQ,CAACQ,YAA3C,EAAyDH,OAAzD;AACA,aAAO,IAAP;AACD;;;;;;AAGH,eAAe,IAAIT,WAAJ,EAAf","sourcesContent":["import axios from \"axios\";\nimport UrlService from \"./UrlService\";\nimport CookieService from \"./CookieService\";\n\nconst expiresAt = 60 * 24;\n\ninterface Credentials {\n  client_id: string;\n  redirect_url: string;\n  response_type: string;\n  scope: string;\n  state: string;\n}\n\nclass AuthService {\n  async doUserLogin(credentials: Credentials) {\n    try {\n      const response = await axios.post(UrlService.loginUrl(), credentials);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error\", error.response);\n      return false;\n    }\n  }\n  handleLoginSuccess(response: any, remember: boolean) {\n    if (!remember) {\n      const options = { path: \"/\" };\n      CookieService.set(\"access_token\", response.access_token, options);\n      return true;\n    }\n\n    let date = new Date();\n    date.setTime(date.getTime() + expiresAt * 60 * 1000);\n    const options = { path: \"/\", expires: date };\n    CookieService.set(\"access_token\", response.access_token, options);\n    return true;\n  }\n}\n\nexport default new AuthService();\n"]},"metadata":{},"sourceType":"module"}