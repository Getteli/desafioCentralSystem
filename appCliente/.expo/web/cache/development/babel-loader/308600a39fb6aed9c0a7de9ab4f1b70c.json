{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/var/www/html/Desafio/appCliente/pages/LinkExpo.js\";\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { useNavigation } from '@react-navigation/native';\nimport { WebView } from 'react-native-webview';\nimport * as Linking from 'expo-linking';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nvar Stack = createStackNavigator();\nvar prefix = Linking.makeUrl('/');\n\nfunction LinkExpo() {\n  return React.createElement(NavigationContainer, {\n    linking: {\n      prefixes: [prefix],\n      config: {\n        screens: {\n          Home: 'home'\n        }\n      },\n      getInitialURL: function getInitialURL() {\n        var url, message;\n        return _regeneratorRuntime.async(function getInitialURL$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _regeneratorRuntime.awrap(Linking.getInitialURL());\n\n              case 2:\n                url = _context.sent;\n\n                if (!(url != null)) {\n                  _context.next = 5;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", url);\n\n              case 5:\n                _context.next = 7;\n                return _regeneratorRuntime.awrap(messaging().getInitialNotification());\n\n              case 7:\n                message = _context.sent;\n                return _context.abrupt(\"return\", message == null ? void 0 : message.notification.url);\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }\n    },\n    independent: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  });\n}\n\nexport default LinkExpo;","map":{"version":3,"sources":["/var/www/html/Desafio/appCliente/pages/LinkExpo.js"],"names":["StatusBar","React","useState","useNavigation","WebView","Linking","NavigationContainer","createStackNavigator","Stack","prefix","makeUrl","LinkExpo","prefixes","config","screens","Home","getInitialURL","url","messaging","getInitialNotification","message","notification"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,OAAOC,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;;;;;AAEA,SAASC,aAAT,QAA8B,0BAA9B;AACA,SAASC,OAAT,QAAwB,sBAAxB;AACA,OAAO,KAAKC,OAAZ,MAAyB,cAAzB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,oBAAT,QAAqC,yBAArC;AACA,IAAMC,KAAK,GAAGD,oBAAoB,EAAlC;AAIA,IAAME,MAAM,GAAGJ,OAAO,CAACK,OAAR,CAAgB,GAAhB,CAAf;;AAGA,SAASC,QAAT,GAAoB;AAUlB,SACE,oBAAC,mBAAD;AACE,IAAA,OAAO,EAAE;AACPC,MAAAA,QAAQ,EAAE,CAACH,MAAD,CADH;AAEPI,MAAAA,MAAM,EAAE;AACNC,QAAAA,OAAO,EAAE;AACPC,UAAAA,IAAI,EAAE;AADC;AADH,OAFD;AAOHC,MAAAA,aAPG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDASWX,OAAO,CAACW,aAAR,EATX;;AAAA;AASDC,gBAAAA,GATC;;AAAA,sBAWHA,GAAG,IAAI,IAXJ;AAAA;AAAA;AAAA;;AAAA,iDAYEA,GAZF;;AAAA;AAAA;AAAA,iDAgBeC,SAAS,GAAGC,sBAAZ,EAhBf;;AAAA;AAgBDC,gBAAAA,OAhBC;AAAA,iDAoBAA,OApBA,oBAoBAA,OAAO,CAAEC,YAAT,CAAsBJ,GApBtB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADX;AAuBG,IAAA,WAAW,EAAE,IAvBhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AA2BD;;AAED,eAAeN,QAAf","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React, {useState} from 'react';\nimport { StyleSheet, Text, View, ScrollView, TouchableOpacity } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport { WebView } from 'react-native-webview';\nimport * as Linking from 'expo-linking';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nconst Stack = createStackNavigator();\n\n// abre uma tela no browser por webView\n\nconst prefix = Linking.makeUrl('/');\n // , 'appcliente://'\n\nfunction LinkExpo() {\n  // const linking = {\n  //   prefixes: ['exp://192.168.1.40:19000'],\n  //   config: {\n  //     screens: {\n  //       Home: 'Home',\n  //     },\n  //   },\n  // };\n\n  return (\n    <NavigationContainer\n      linking={{\n        prefixes: [prefix],\n        config: {\n          screens: {\n            Home: 'home',\n          },\n        },\n      async getInitialURL() {\n        // Check if app was opened from a deep link\n        const url = await Linking.getInitialURL();\n\n        if (url != null) {\n          return url;\n        }\n\n        // Check if there is an initial firebase notification\n        const message = await messaging().getInitialNotification();\n\n        // Get the `url` property from the notification which corresponds to a screen\n        // This property needs to be set on the notification payload when sending it\n        return message?.notification.url;\n      },\n    }} independent={true}>\n    </NavigationContainer>\n  );\n}\n\nexport default LinkExpo;\n"]},"metadata":{},"sourceType":"module"}